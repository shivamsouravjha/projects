{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "question1.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CRWPbgFfqUfG",
        "colab_type": "text"
      },
      "source": [
        "1) Write a function in python that inputs a dataframe and identify which columns have date in them. Using these date columns make new columns which are difference between these columns taking 2 at a time. (for instance if there is date1, date2, date3 columns, output should be like date1-date2, date2-date3, date1-date3). For this problem only, print out data in the colab.\n",
        "\n",
        "Thing to consider\n",
        "\n",
        "· Date column might have some invalid entries in them\n",
        "\n",
        "· Date can be of different format throughout the column\n",
        "\n",
        "· Code should be efficient and fast\n",
        "\n",
        "· Code should be well commented and easy to interpret\n",
        "\n",
        "· Use google Colab\n",
        "\n",
        "· Code should be robust enough to run on any dataset\n",
        "\n",
        "· Make a dummy dataset by yourself.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Knpgn8mhGq-_",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#standard imports for all 3 questions\n",
        "import numpy as np                                                #importing numpy\n",
        "import pandas as pd                                               #importing pandas\n"
      ],
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TENDciuRqxLY",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 173
        },
        "outputId": "721b75b4-8dbe-4ea7-88ff-8e31c5dad87a"
      },
      "source": [
        "#Question 1\n",
        "from itertools import combinations                                #importing combinations from itertools to get combination of every column of dates\n",
        "\n",
        "mf = pd.DataFrame([['2019/09/22', 'nan','m','2019 Apr 28'],['2019/09/21', '2019 May 28','m','2019 May 28',],['22/05/2020','2019/09/21','m','20191216'],['2019-09-13','22/05/2020', 'jdjnf','2019/09/21']],columns=('Dates','Dates1','Alphabets','Dates2'))\n",
        "#above lines makes  4 columns which have dates and alphabets\n",
        "mf.head()                                       #to show the four columns \n"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Dates</th>\n",
              "      <th>Dates1</th>\n",
              "      <th>Alphabets</th>\n",
              "      <th>Dates2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2019/09/22</td>\n",
              "      <td>nan</td>\n",
              "      <td>m</td>\n",
              "      <td>2019 Apr 28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2019/09/21</td>\n",
              "      <td>2019 May 28</td>\n",
              "      <td>m</td>\n",
              "      <td>2019 May 28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>22/05/2020</td>\n",
              "      <td>2019/09/21</td>\n",
              "      <td>m</td>\n",
              "      <td>20191216</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2019-09-13</td>\n",
              "      <td>22/05/2020</td>\n",
              "      <td>jdjnf</td>\n",
              "      <td>2019/09/21</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "        Dates       Dates1 Alphabets       Dates2\n",
              "0  2019/09/22          nan         m  2019 Apr 28\n",
              "1  2019/09/21  2019 May 28         m  2019 May 28\n",
              "2  22/05/2020   2019/09/21         m     20191216\n",
              "3  2019-09-13   22/05/2020     jdjnf   2019/09/21"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qAxd7DIhshaS",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 173
        },
        "outputId": "8a37df41-8c13-457a-a7f0-a3ac808eae90"
      },
      "source": [
        "########################################################## function begin#########################################################################3 \n",
        "def getdates(df):                                                        #defining a function that takes input a dataframe df(variable) \n",
        "  \n",
        " \n",
        "  for col in df.columns:                                                  #to iter in columns of the dataframe df\n",
        "    if df[col].dtype == 'object':                                         #inorder to find aphabets(dates are stored as O and not DateTime64) which falls under the category of object    \n",
        "        try:                                                                 #to try to apply the code on date format\n",
        "              df[col] = pd.to_datetime(df[col],format = '%Y%m%d',utc=True,errors='ignore',infer_datetime_format=True) #to find the date format 20190212\n",
        "        except :                                                              #if the date is not in the format belw would be used\n",
        "          try:                                                            #similar as try of above case but for 2019/1/23format\n",
        "              df[col] = pd.to_datetime(df[col],format = '%Y/%m/%d',infer_datetime_format=True)\n",
        "          except:\n",
        "              try:\n",
        "                  df[col] = pd.to_datetime(df[col],format = '%Y-%m-%d',infer_datetime_format=True)           #format 2019-2-12 format\n",
        "              except:\n",
        "                  try:\n",
        "                    df[col] = pd.to_datetime(df[col],format = '%d/%m/%Y',infer_datetime_format=True)          #format 23/2/2019 format\n",
        "                  except:\n",
        "                    df[col] = pd.to_datetime(df[col],format = '%Y %B %d',infer_datetime_format=True)       #format 2019 monthname day \n",
        "\n",
        "  for col in df.columns:                                                            #to iter columns inorder to drop alphabets, number and integers as they are not dates\n",
        "  \n",
        "    if df[col].dtype == 'object'  or   df[col].dtype == 'float64'  or df[col].dtype ==  'int64' :    #        to get column that are not date  \n",
        "      try:\n",
        "        df.drop([col],axis= 1,inplace=True)                             #to drop the column \n",
        "      except:\n",
        "        print(1) \n",
        "                                                    #incase oof failure we print 1 to test\n",
        "  columns  = mf.columns                           #to make a list of columns\n",
        "\n",
        "  for col in combinations(columns,2):              #to iter for columns 2 at a time,to subtrace the dates\n",
        "          try:\n",
        "              name = str(col[0]) + '_' + str(col[1])          #formation of name of new column\n",
        "              mf[name] = mf[col[0]] - mf[col[1]]                  #difference between two column of dates\n",
        "          except ValueError:\n",
        "              \n",
        "              pass\n",
        "  mf.fillna(pd.Timedelta(seconds=0),inplace=True)                     #instead of NaT display 0 (here subtraction couldn't be performed because of invalid value in column of date i.e, its not date)\n",
        "\n",
        "  return df                           #return the dataframe df\n",
        "\n",
        "\n",
        "\n",
        "#########################################################end of function#####################################################################################\n",
        "\n",
        "mf =getdates(mf)                          #call the function\n",
        "\n",
        "mf.head()                                                #call to check the solution\n"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Dates</th>\n",
              "      <th>Dates1</th>\n",
              "      <th>Dates2</th>\n",
              "      <th>Dates_Dates1</th>\n",
              "      <th>Dates_Dates2</th>\n",
              "      <th>Dates1_Dates2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2019-09-22 00:00:00+00:00</td>\n",
              "      <td>0 days 00:00:00</td>\n",
              "      <td>2019-04-28 00:00:00+00:00</td>\n",
              "      <td>0 days</td>\n",
              "      <td>147 days</td>\n",
              "      <td>0 days</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2019-09-21 00:00:00+00:00</td>\n",
              "      <td>2019-05-28 00:00:00+00:00</td>\n",
              "      <td>2019-05-28 00:00:00+00:00</td>\n",
              "      <td>116 days</td>\n",
              "      <td>116 days</td>\n",
              "      <td>0 days</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2020-05-22 00:00:00+00:00</td>\n",
              "      <td>2019-09-21 00:00:00+00:00</td>\n",
              "      <td>2019-12-16 00:00:00+00:00</td>\n",
              "      <td>244 days</td>\n",
              "      <td>158 days</td>\n",
              "      <td>-86 days</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2019-09-13 00:00:00+00:00</td>\n",
              "      <td>2020-05-22 00:00:00+00:00</td>\n",
              "      <td>2019-09-21 00:00:00+00:00</td>\n",
              "      <td>-252 days</td>\n",
              "      <td>-8 days</td>\n",
              "      <td>244 days</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                      Dates  ... Dates1_Dates2\n",
              "0 2019-09-22 00:00:00+00:00  ...        0 days\n",
              "1 2019-09-21 00:00:00+00:00  ...        0 days\n",
              "2 2020-05-22 00:00:00+00:00  ...      -86 days\n",
              "3 2019-09-13 00:00:00+00:00  ...      244 days\n",
              "\n",
              "[4 rows x 6 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "S9mt7r_qDq8A",
        "colab_type": "text"
      },
      "source": [
        "# New Section"
      ]
    }
  ]
}
